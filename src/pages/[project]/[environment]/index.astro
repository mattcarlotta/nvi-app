---
import type {
    Environment,
    Environments,
    Project,
    Secrets,
} from "../../../types";
import LoginForm from "../../../components/forms/LoginForm";
import NavBar from "../../../components/layout/NavBar.astro";
import MainLayout from "../../../layouts/main.astro";
import { fetchAPIGET } from "../../../utils/fetchAPI";
import SecretsTable from "../../../components/layout/SecretsTable";

const sessionToken = Astro.cookies.get("SESSION_TOKEN");
const headers = new Headers();
headers.append("Cookie", `SESSION_TOKEN=${sessionToken?.value}`);

let userName = "";
let project: Project | null = null;
let environment: Environment | null = null;
let environments: Environments | null = null;
let secrets: Secrets = [];
try {
    const userRes = await fetchAPIGET({
        url: "/loggedin/",
        headers,
    });

    if (!userRes.data?.name) {
        throw Error("Not logged in!");
    }

    userName = userRes.data.name;

    const projectRes = await fetchAPIGET({
        url: `/project/name/${Astro.params.project}/`,
        headers,
    });

    if (!projectRes.data?.id) {
        throw Error("Not a valid project name");
    }

    project = projectRes.data;

    const environmentsRes = await fetchAPIGET({
        url: `/environments/project/${project?.id}/`,
        headers,
    });

    environments = environmentsRes.data;

    const environmentRes = await fetchAPIGET({
        url: `/environment/name/?name=${Astro.params.environment}&projectID=${project?.id}`,
        headers,
    });

    if (!environmentRes.data?.id) {
        throw Error("Not a valid environment name");
    }

    environment = environmentRes.data;

    const secretsRes = await fetchAPIGET({
        url: `/secrets/${environment?.id}`,
        headers,
    });

    secrets = secretsRes.data;
} catch {
    // handle an invalid project and environment below
}

const description =
    project?.name && environment?.name
        ? `${project.name} - ${environment.name}`
        : "environment not found";
---

<MainLayout description={description}>
    <NavBar userName={userName} slot="navbar" />
    {
        !userName ? (
            <LoginForm client:load reloadPage />
        ) : project && environment && environments?.length ? (
            <>
                <div class="flex items-center space-x-2 text-3xl mb-2">
                    <a
                        class="block text-blue-500 hover:underline"
                        href="/dashboard/"
                    >
                        dashboard
                    </a>
                    <div class="text-2xl">&#187;</div>
                    <a
                        title={project.name}
                        class="block text-blue-500 text-ellipsis overflow-hidden max-w-[20rem] hover:underline"
                        href={`/${project.name}/`}
                    >
                        {project.name}
                    </a>
                    <div class="text-2xl">&#187;</div>
                    <h1
                        title={environment.name}
                        class="font-bold text-ellipsis overflow-hidden max-w-[20rem]"
                    >
                        {environment.name}
                    </h1>
                </div>
                <SecretsTable
                    client:load
                    projectID={project.id}
                    projectName={project.name}
                    environments={environments}
                    secrets={secrets}
                />
            </>
        ) : (
            <h1>Environment Not Found</h1>
        )
    }
</MainLayout>
