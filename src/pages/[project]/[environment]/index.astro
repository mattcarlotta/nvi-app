---
import type {
    Environment,
    Environments,
    Project,
    Secrets,
} from "../../../types";
import LoginForm from "../../../components/forms/LoginForm";
import NavBar from "../../../components/layout/NavBar.astro";
import MainLayout from "../../../layouts/main.astro";
import { fetchAPIGET } from "../../../utils/fetchAPI";
import SecretsList from "../../../components/layout/SecretsList";

const sessionToken = Astro.cookies.get("SESSION_TOKEN");
let userName = "";
let project: Project | null = null;
let environment: Environment | null = null;
let environments: Environments = [];
let secrets: Secrets = [];
try {
    const headers = new Headers();
    headers.append("Cookie", `SESSION_TOKEN=${sessionToken?.value}`);
    const userRes = await fetchAPIGET({
        url: "/loggedin/",
        headers,
    });

    if (!userRes.data?.name) {
        throw Error("Not logged in!");
    }

    userName = userRes.data.name;

    const res = await fetchAPIGET({
        url: `/secrets/projectenvironment/?project=${Astro.params.project}&environment=${Astro.params.environment}`,
        headers,
    });

    project = res.data?.project || null;

    environment = res.data?.environment || null;

    environments = res.data?.environments || [];

    secrets = res.data?.secrets || [];
} catch {
    // handle an invalid project and environment below
}

const description =
    project?.name && environment?.name
        ? `${project.name} - ${environment.name}`
        : "environment not found";
---

<MainLayout description={description}>
    <NavBar userName={userName} slot="navbar" />
    {
        !userName ? (
            <LoginForm client:load reloadPage />
        ) : project && environment && environments?.length ? (
            <>
                <div class="flex items-center space-x-2 text-3xl mb-2">
                    <a
                        class="block text-blue-500 hover:underline"
                        href="/dashboard/"
                    >
                        dashboard
                    </a>
                    <div class="text-2xl">&#187;</div>
                    <a
                        title={project.name}
                        class="block text-blue-500 text-ellipsis overflow-hidden max-w-[20rem] hover:underline"
                        href={`/${project.name}/`}
                    >
                        {project.name}
                    </a>
                    <div class="text-2xl">&#187;</div>
                    <h1
                        title={environment.name}
                        class="font-bold text-ellipsis overflow-hidden max-w-[20rem]"
                    >
                        {environment.name}
                    </h1>
                </div>
                <SecretsList
                    client:load
                    environment={environment}
                    environments={environments}
                    projectID={project.id}
                    projectName={project.name}
                    secrets={secrets}
                />
            </>
        ) : (
            <h1>Environment Not Found</h1>
        )
    }
</MainLayout>
