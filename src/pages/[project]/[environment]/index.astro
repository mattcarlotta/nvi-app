---
import type { Environment, Environments, Project, Secrets, User } from "../../../types";
import LoginForm from "../../../components/forms/LoginForm";
import DashboardIcon from "../../../components/icons/DashboardIcon";
import EnvironmentIcon from "../../../components/icons/EnvironmentIcon";
import ProjectIcon from "../../../components/icons/ProjectIcon";
import NavBar from "../../../components/layout/NavBar.astro";
import SecretsList from "../../../components/layout/SecretsList";
import MainLayout from "../../../layouts/main.astro";
import { fetchAPIGET } from "../../../utils/fetchAPI";

const sessionToken = Astro.cookies.get("SESSION_TOKEN");
let user: User | null = null;
let project: Project | null = null;
let environment: Environment | null = null;
let environments: Environments = [];
let secrets: Secrets = [];
try {
    const headers = new Headers();
    headers.append("Cookie", `SESSION_TOKEN=${sessionToken?.value}`);
    const userRes = await fetchAPIGET({
        url: "/loggedin/",
        headers,
    });

    if (!userRes.data) {
        throw Error("Not logged in");
    }

    user = userRes.data;

    const res = await fetchAPIGET({
        url: `/secrets/projectenvironment/?project=${Astro.params.project}&environment=${Astro.params.environment}`,
        headers,
    });

    project = res.data?.project || null;

    environment = res.data?.environment || null;

    environments = res.data?.environments || [];

    secrets = res.data?.secrets || [];
} catch {
    // handle an invalid project and environment below
}

const description =
    project?.name && environment?.name
        ? `${project.name} - ${environment.name}`
        : "environment not found";
---

<MainLayout description={description}>
    <NavBar email={user?.email} userName={user?.name} slot="navbar" />
    {
        !user?.name ? (
            <LoginForm client:load reloadPage />
        ) : project && environment && environments?.length ? (
            <>
                <div class="text-lg mb-2 md:flex md:items-center md:space-x-2 md:text-3xl">
                    <div class="hidden text-blue-500 md:flex md:items-center">
                        <DashboardIcon class="flex-none w-7 h-7" />
                        <a class="block hover:underline" href="/dashboard/">
                            dashboard
                        </a>
                    </div>
                    <div class="hidden text-2xl text-gray-600 md:block">&#8227;</div>
                    <div class="flex items-center">
                        <ProjectIcon class="flex-none w-5 h-5 fill-blue-500 mr-1 md:w-6 md:h-6" />
                        <a
                            title={project.name}
                            class="block text-blue-500 text-ellipsis overflow-hidden max-w-[20rem] hover:underline"
                            href={`/${project.name}/`}
                        >
                            {project.name}
                        </a>
                    </div>
                    <div class="hidden text-2xl text-gray-600 md:block">&#8227;</div>
                    <div class="flex items-center">
                        <EnvironmentIcon class="flex-none w-6 h-6 fill-gray-100 mr-1" />
                        <h1
                            title={environment.name}
                            class="font-bold text-2xl text-ellipsis overflow-hidden max-w-[20rem] md:text-3xl"
                        >
                            {environment.name}
                        </h1>
                    </div>
                </div>
                <SecretsList
                    client:load
                    environment={environment}
                    environments={environments}
                    projectID={project.id}
                    projectName={project.name}
                    secrets={secrets}
                />
            </>
        ) : (
            <h1>Environment Not Found</h1>
        )
    }
</MainLayout>
