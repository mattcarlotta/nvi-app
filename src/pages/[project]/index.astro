---
import type { Environments, Project } from "../../types/";
import DashboardHeader from "../../components/layout/DashboardHeader.astro";
import MainLayout from "../../layouts/main.astro";
import { fetchAPIGET } from "../../utils/fetchAPI";
import EnvironmentList from "../../components/layout/EnvironmentList";

const sessionToken = Astro.cookies.get("SESSION_TOKEN");
if (!sessionToken?.boolean()) {
    return Astro.redirect("/login");
}

let userName = "";
const headers = new Headers();
headers.append("Cookie", `SESSION_TOKEN=${sessionToken.value}`);
try {
    const userRes = await fetchAPIGET({
        url: "/loggedin",
        headers,
    });

    userName = userRes.data.name;
} catch {
    Astro.cookies.set("SESSION_TOKEN", "", {
        path: "/",
        httpOnly: true,
        maxAge: 0,
        secure: import.meta.env.IN_PRODUCTION === "true",
    });
    return Astro.redirect("/login");
}

let project: Project | null = null;
let environments: Environments = [];
try {
    const projectRes = await fetchAPIGET({
        url: `/project/name/${Astro.params.project}`,
        headers,
    });

    project = projectRes.data;

    if (project?.name) {
        const environmentsRes = await fetchAPIGET({
            url: `/environments/project/${project.id}`,
            headers,
        });

        environments = environmentsRes.data;
    }
} catch {
    // handle an invalid project name below
}
---

<MainLayout description={project ? project.name : "Project Not Found"}>
    <DashboardHeader user={userName} slot="navbar" />
    {
        project ? (
            <>
                <h1 class="text-5xl mb-2">{project.name}</h1>
                <EnvironmentList
                    client:load
                    projectName={project.name}
                    projectID={project.id}
                    environments={environments}
                />
            </>
        ) : (
            <h1>Project Not Found</h1>
        )
    }
</MainLayout>
