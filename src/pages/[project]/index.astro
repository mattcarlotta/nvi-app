---
import type { Environments, Project } from "../../types/";
import EnvironmentList from "../../components/layout/EnvironmentList";
import LoginForm from "../../components/forms/LoginForm";
import NavBar from "../../components/layout/NavBar.astro";
import MainLayout from "../../layouts/main.astro";
import { fetchAPIGET } from "../../utils/fetchAPI";

const sessionToken = Astro.cookies.get("SESSION_TOKEN");
const headers = new Headers();
headers.append("Cookie", `SESSION_TOKEN=${sessionToken?.value}`);

let userName = "";
let project: Project | null = null;
let environments: Environments = [];
try {
    const userRes = await fetchAPIGET({
        url: "/loggedin/",
        headers,
    });

    if (!userRes.data?.name) {
        throw Error("Not logged in");
    }

    userName = userRes.data.name;

    const projectRes = await fetchAPIGET({
        url: `/project/name/${Astro.params.project}/`,
        headers,
    });

    if (!projectRes.data?.id) {
        throw Error("Not a valid project name");
    }

    project = projectRes.data;

    const environmentsRes = await fetchAPIGET({
        url: `/environments/project/${project?.id}/`,
        headers,
    });

    environments = environmentsRes.data;
} catch {
    // handles errors below
}
---

<MainLayout description={project ? project.name : "Project Not Found"}>
    <NavBar userName={userName} slot="navbar" />
    {
        !userName ? (
            <LoginForm client:load reloadPage />
        ) : project ? (
            <>
                <h1 class="text-5xl mb-2">{project.name}</h1>
                <EnvironmentList
                    client:load
                    projectName={project.name}
                    projectID={project.id}
                    environments={environments}
                />
            </>
        ) : (
            <h1>Project Not Found</h1>
        )
    }
</MainLayout>
